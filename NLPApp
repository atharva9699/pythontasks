from tkinter import *
from mydb import Database
from tkinter import messagebox
from myapi import API


class NLPApp:
    def __init__(self):
        self.dbo = Database()
        self.apio = API()

        self.root = Tk()
        self.root.title('NLPApp')
        self.root.geometry('350x600')
        self.root.configure(bg='#34495E')

        self.login_gui()
        self.root.mainloop()

    def login_gui(self):
        self.clear()
        Label(self.root, text='NLPApp', bg='#34495E', fg='white', font=('verdana', 24, 'bold')).pack(pady=30)

        Label(self.root, text='Enter Email').pack()
        self.email_input = Entry(self.root, width=40)
        self.email_input.pack(ipady=4, pady=5)

        Label(self.root, text='Enter Password').pack()
        self.password_input = Entry(self.root, width=40, show='*')
        self.password_input.pack(ipady=4, pady=5)

        Button(self.root, text='Login', width=30, command=self.perform_login).pack(pady=10)
        Label(self.root, text="Not a member?").pack(pady=10)
        Button(self.root, text='Register Now', command=self.register_gui).pack()

    def register_gui(self):
        self.clear()
        Label(self.root, text='Register', bg='#34495E', fg='white', font=('verdana', 24, 'bold')).pack(pady=30)

        Label(self.root, text='Enter Name').pack()
        self.name_input = Entry(self.root, width=40)
        self.name_input.pack(ipady=4, pady=5)

        Label(self.root, text='Enter Email').pack()
        self.email_input = Entry(self.root, width=40)
        self.email_input.pack(ipady=4, pady=5)

        Label(self.root, text='Enter Password').pack()
        self.password_input = Entry(self.root, width=40, show='*')
        self.password_input.pack(ipady=4, pady=5)

        Button(self.root, text='Register', width=30, command=self.perform_registration).pack(pady=10)
        Label(self.root, text="Already a member?").pack(pady=10)
        Button(self.root, text='Login Now', command=self.login_gui).pack()

    def clear(self):
        for widget in self.root.winfo_children():
            widget.destroy()

    def perform_registration(self):
        name, email, password = self.name_input.get(), self.email_input.get(), self.password_input.get()
        if self.dbo.add_data(name, email, password):
            messagebox.showinfo("Success", "Registration successful! You can log in now.")
        else:
            messagebox.showerror("Error", "Email already exists!")

    def perform_login(self):
        email, password = self.email_input.get(), self.password_input.get()
        if self.dbo.search(email, password):
            messagebox.showinfo("Success", "Login successful!")
            self.home_gui()
        else:
            messagebox.showerror("Error", "Incorrect email/password")

    def home_gui(self):
        self.clear()
        Label(self.root, text='NLPApp', bg='#34495E', fg='white', font=('verdana', 24, 'bold')).pack(pady=30)

        Button(self.root, text='Sentiment Analysis', width=30, command=self.sentiment_gui).pack(pady=10)
        Button(self.root, text='Named Entity Recognition', width=30, command=self.ner_gui).pack(pady=10)
        Button(self.root, text='Emotion Prediction', width=30, command=self.emotion_gui).pack(pady=10)
        Button(self.root, text='Logout', command=self.login_gui).pack(pady=10)

    def sentiment_gui(self):
        self.clear()
        Label(self.root, text='Sentiment Analysis', bg='#34495E', fg='white', font=('verdana', 20)).pack(pady=20)

        Label(self.root, text='Enter Text').pack()
        self.sentiment_input = Entry(self.root, width=50)
        self.sentiment_input.pack(ipady=4, pady=5)

        Button(self.root, text='Analyze', command=self.do_sentiment_analysis).pack(pady=10)
        self.sentiment_result = Label(self.root, text='', bg='#34495E', fg='white', font=('verdana', 14))
        self.sentiment_result.pack(pady=10)
        Button(self.root, text='Go Back', command=self.home_gui).pack(pady=10)

    def do_sentiment_analysis(self):
        text = self.sentiment_input.get()
        result = self.apio.sentiment_analysis(text)
        self.sentiment_result.config(text=str(result))


nlp = NLPApp()
from tkinter import *
from mydb import Database
from tkinter import messagebox
from myapi import API


class NLPApp:
    def __init__(self):
        self.dbo = Database()
        self.apio = API()

        self.root = Tk()
        self.root.title('NLPApp')
        self.root.geometry('350x600')
        self.root.configure(bg='#34495E')

        self.login_gui()
        self.root.mainloop()

    def login_gui(self):
        self.clear()
        Label(self.root, text='NLPApp', bg='#34495E', fg='white', font=('verdana', 24, 'bold')).pack(pady=30)

        Label(self.root, text='Enter Email').pack()
        self.email_input = Entry(self.root, width=40)
        self.email_input.pack(ipady=4, pady=5)

        Label(self.root, text='Enter Password').pack()
        self.password_input = Entry(self.root, width=40, show='*')
        self.password_input.pack(ipady=4, pady=5)

        Button(self.root, text='Login', width=30, command=self.perform_login).pack(pady=10)
        Label(self.root, text="Not a member?").pack(pady=10)
        Button(self.root, text='Register Now', command=self.register_gui).pack()

    def register_gui(self):
        self.clear()
        Label(self.root, text='Register', bg='#34495E', fg='white', font=('verdana', 24, 'bold')).pack(pady=30)

        Label(self.root, text='Enter Name').pack()
        self.name_input = Entry(self.root, width=40)
        self.name_input.pack(ipady=4, pady=5)

        Label(self.root, text='Enter Email').pack()
        self.email_input = Entry(self.root, width=40)
        self.email_input.pack(ipady=4, pady=5)

        Label(self.root, text='Enter Password').pack()
        self.password_input = Entry(self.root, width=40, show='*')
        self.password_input.pack(ipady=4, pady=5)

        Button(self.root, text='Register', width=30, command=self.perform_registration).pack(pady=10)
        Label(self.root, text="Already a member?").pack(pady=10)
        Button(self.root, text='Login Now', command=self.login_gui).pack()

    def clear(self):
        for widget in self.root.winfo_children():
            widget.destroy()

    def perform_registration(self):
        name, email, password = self.name_input.get(), self.email_input.get(), self.password_input.get()
        if self.dbo.add_data(name, email, password):
            messagebox.showinfo("Success", "Registration successful! You can log in now.")
        else:
            messagebox.showerror("Error", "Email already exists!")

    def perform_login(self):
        email, password = self.email_input.get(), self.password_input.get()
        if self.dbo.search(email, password):
            messagebox.showinfo("Success", "Login successful!")
            self.home_gui()
        else:
            messagebox.showerror("Error", "Incorrect email/password")

    def home_gui(self):
        self.clear()
        Label(self.root, text='NLPApp', bg='#34495E', fg='white', font=('verdana', 24, 'bold')).pack(pady=30)

        Button(self.root, text='Sentiment Analysis', width=30, command=self.sentiment_gui).pack(pady=10)
        Button(self.root, text='Named Entity Recognition', width=30, command=self.ner_gui).pack(pady=10)
        Button(self.root, text='Emotion Prediction', width=30, command=self.emotion_gui).pack(pady=10)
        Button(self.root, text='Logout', command=self.login_gui).pack(pady=10)

    def sentiment_gui(self):
        self.clear()
        Label(self.root, text='Sentiment Analysis', bg='#34495E', fg='white', font=('verdana', 20)).pack(pady=20)

        Label(self.root, text='Enter Text').pack()
        self.sentiment_input = Entry(self.root, width=50)
        self.sentiment_input.pack(ipady=4, pady=5)

        Button(self.root, text='Analyze', command=self.do_sentiment_analysis).pack(pady=10)
        self.sentiment_result = Label(self.root, text='', bg='#34495E', fg='white', font=('verdana', 14))
        self.sentiment_result.pack(pady=10)
        Button(self.root, text='Go Back', command=self.home_gui).pack(pady=10)

    def do_sentiment_analysis(self):
        text = self.sentiment_input.get()
        result = self.apio.sentiment_analysis(text)
        self.sentiment_result.config(text=str(result))


nlp = NLPApp()
